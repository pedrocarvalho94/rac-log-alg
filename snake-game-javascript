<canvas id="myCanvas" width="600" height="600" style="border:1px solid #000000;"></canvas>
<script>
/*
   JavaScript Snake Game
   Autor: Jan Bodnar
   http://zetcode.com/javascript/snake/
   Adaptado por: Gilson Pereira
*/

// Main

var canvas;
var ctx;

var head;
var apple1; var apple2; var apple3; var apple4; var apple5; var apple6; var apple7; var apple8; var apple9; var apple10; var apple11; var apple12; var apple13; var apple14; var apple15;
var block1; var block2; var block3; var block4; var block5; var block6; var block7; var block8; var block9; var block10; 
var ball;
var lives = 5;
var score = 0;

var dots;
var apple1_x; var apple1_y;
var apple2_x; var apple2_y;
var apple3_x; var apple3_y;
var apple4_x; var apple4_y;
var apple5_x; var apple5_y;
var apple6_x; var apple6_y;
var apple7_x; var apple7_y;
var apple8_x; var apple8_y;
var apple9_x; var apple9_y;
var apple10_x; var apple10_y;
var apple11_x; var apple11_y;
var apple12_x; var apple12_y;
var apple13_x; var apple13_y;
var apple14_x; var apple14_y;
var apple15_x; var apple15_y;

var block1_x; var block1_y;
var block2_x; var block2_y;
var block3_x; var block3_y;
var block4_x; var block4_y;
var block5_x; var block5_y;
var block6_x; var block6_y;
var block7_x; var block7_y;
var block8_x; var block8_y;
var block9_x; var block9_y;
var block10_x; var block10_y;



var leftDirection = false;
var rightDirection = true;
var upDirection = false;
var downDirection = false;
var inGame = true;    

const DOT_SIZE = 20;
const MAX_RAND = 30;
const DELAY = 100;
const C_HEIGHT = 600;
const C_WIDTH = 600;    

const LEFT_KEY = 37;
const RIGHT_KEY = 39;
const UP_KEY = 38;
const DOWN_KEY = 40;

var x = [];
var y = [];

init();

// Functions

function init() {
    canvas = document.getElementById("myCanvas");
    ctx = canvas.getContext("2d");

	ctx.fillStyle = "darkseagreen";
	ctx.fillRect(0, 0, C_WIDTH, C_HEIGHT);

    loadImages();
    createSnake();
    locateApples();
	locateBlocks();
    setTimeout("gameCycle()", DELAY);
}    

function loadImages() {
    head = new Image();
    head.src = "head.png";    
    
    ball = new Image();
    ball.src = "dot.png"; 
    
    apple1 = new Image();
    apple1.src = "apple.png";
	
	apple2 = new Image();
    apple2.src = "apple.png";
	
	apple3 = new Image();
    apple3.src = "apple.png";
	
	apple4 = new Image();
    apple4.src = "apple.png";
	
	apple5 = new Image();
    apple5.src = "apple.png";
	
	apple6 = new Image();
    apple6.src = "apple.png";
	
	apple7 = new Image();
    apple7.src = "apple.png";
	
	apple8 = new Image();
    apple8.src = "apple.png";
	
	apple9 = new Image();
    apple9.src = "apple.png";
	
	apple10 = new Image();
    apple10.src = "apple.png";
	
	apple11 = new Image();
    apple11.src = "apple.png";
	
	apple12 = new Image();
    apple12.src = "apple.png";
	
	apple13 = new Image();
    apple13.src = "apple.png";
	
	apple14 = new Image();
    apple14.src = "apple.png";
	
	apple15 = new Image();
    apple15.src = "apple.png";
	
	block1 = new Image();
	block1.src = "block.png";
	
	block2 = new Image();
	block2.src = "block.png";
	
	block3 = new Image();
	block3.src = "block.png";
	
	block4 = new Image();
	block4.src = "block.png";
	
	block5 = new Image();
	block5.src = "block.png";
	
	block6 = new Image();
	block6.src = "block.png";
	
	block7 = new Image();
	block7.src = "block.png";
	
	block8 = new Image();
	block8.src = "block.png";
	
	block9 = new Image();
	block9.src = "block.png";
	
	block10 = new Image();
	block10.src = "block.png";
}

function createSnake() {
    dots = 2;
	
    for (var z = 0; z < dots; z++) {
        x[z] = 100 - z * 10;
        y[z] = 100;
    }
}

function locateApples() {
	var r = Math.floor(Math.random() * MAX_RAND);
	apple1_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple1_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple2_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple2_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple3_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple3_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple4_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple4_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple5_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple5_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple6_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple6_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple7_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple7_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple8_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple8_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple9_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple9_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple10_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple10_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple11_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple11_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple12_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple12_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple13_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple13_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple14_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple14_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	apple15_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	apple15_y = r * DOT_SIZE;
}

function locateBlocks() {
	var r = Math.floor(Math.random() * MAX_RAND);
	block1_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block1_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block2_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block2_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block3_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block3_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block4_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block4_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block5_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block5_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block6_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block6_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block7_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block7_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block8_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block8_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block9_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block9_y = r * DOT_SIZE;
	
	var r = Math.floor(Math.random() * MAX_RAND);
	block10_x = r * DOT_SIZE;

	r = Math.floor(Math.random() * MAX_RAND);
	block10_y = r * DOT_SIZE;
}

function gameCycle() {
    if (inGame) {
        checkApple();
		checkBlock();
        checkCollision();
		checkLives();
		checkScore();
        move();
        doDrawing();
        setTimeout("gameCycle()", DELAY);
    }
}

function checkApple() {
    if ((x[0] == apple1_x) && (y[0] == apple1_y)) {
        dots++;
		score++;
		apple1_x = 1000; apple1_y = 1000;
    }
	if ((x[0] == apple2_x) && (y[0] == apple2_y)) {
        dots++;
		score++;
		apple2_x = 1000; apple2_y = 1000;
    }
	if ((x[0] == apple3_x) && (y[0] == apple3_y)) {
        dots++;
		score++;
		apple3_x = 1000; apple3_y = 1000;
    }
	if ((x[0] == apple4_x) && (y[0] == apple4_y)) {
        dots++;
		score++;
		apple4_x = 1000; apple4_y = 1000;
    }
	if ((x[0] == apple5_x) && (y[0] == apple5_y)) {
        dots++;
		score++;
		apple5_x = 1000; apple5_y = 1000;
    }
	if ((x[0] == apple6_x) && (y[0] == apple6_y)) {
        dots++;
		score++;
		apple6_x = 1000; apple6_y = 1000;
    }
	if ((x[0] == apple7_x) && (y[0] == apple7_y)) {
        dots++;
		score++;
		apple7_x = 1000; apple7_y = 1000;
    }
	if ((x[0] == apple8_x) && (y[0] == apple8_y)) {
        dots++;
		score++;
		apple8_x = 1000; apple8_y = 1000;
    }
	if ((x[0] == apple9_x) && (y[0] == apple9_y)) {
        dots++;
		score++;
		apple9_x = 1000; apple9_y = 1000;
    }
	if ((x[0] == apple10_x) && (y[0] == apple10_y)) {
        dots++;
		score++;
		apple10_x = 1000; apple10_y = 1000;
    }
	if ((x[0] == apple11_x) && (y[0] == apple11_y)) {
        dots++;
		score++;
		apple11_x = 1000; apple11_y = 1000;
    }
	if ((x[0] == apple12_x) && (y[0] == apple12_y)) {
        dots++;
		score++;
		apple12_x = 1000; apple12_y = 1000;
    }
	if ((x[0] == apple13_x) && (y[0] == apple13_y)) {
        dots++;
		score++;
		apple13_x = 1000; apple13_y = 1000;
    }
	if ((x[0] == apple14_x) && (y[0] == apple14_y)) {
        dots++;
		score++;
		apple14_x = 1000; apple14_y = 1000;
    }
	if ((x[0] == apple15_x) && (y[0] == apple15_y)) {
        dots++;
		score++;
		apple15_x = 1000; apple15_y = 1000;
    }
}

function checkBlock() {
	if ((x[0] == block1_x) && (y[0] == block1_y)) {
		lives = lives - 1;
		block1_x = 1000; block1_y = 1000;
	}
	if ((x[0] == block2_x) && (y[0] == block2_y)) {
		lives = lives - 1;
		block2_x = 1000; block2_y = 1000;
	}
	if ((x[0] == block3_x) && (y[0] == block3_y)) {
		lives = lives - 1;
		block3_x = 1000; block3_y = 1000;
	}
	if ((x[0] == block4_x) && (y[0] == block4_y)) {
		lives = lives - 1;
		block4_x = 1000; block4_y = 1000;
	}
	if ((x[0] == block5_x) && (y[0] == block5_y)) {
		lives = lives - 1;
		block5_x = 1000; block5_y = 1000;
	}
	if ((x[0] == block6_x) && (y[0] == block6_y)) {
		lives = lives - 1;
		block6_x = 1000; block6_y = 1000;
	}
	if ((x[0] == block7_x) && (y[0] == block7_y)) {
		lives = lives - 1;
		block7_x = 1000; block7_y = 1000;
	}
	if ((x[0] == block8_x) && (y[0] == block8_y)) {
		lives = lives - 1;
		block8_x = 1000; block8_y = 1000;
	}
	if ((x[0] == block9_x) && (y[0] == block9_y)) {
		lives = lives - 1;
		block9_x = 1000; block9_y = 1000;
	}
	if ((x[0] == block10_x) && (y[0] == block10_y)) {
		lives = lives - 1;
		block10_x = 1000; block10_y = 1000;
	}
}

function checkCollision() {
    for (var z = dots; z > 0; z--) {
        if ((z > 4) && (x[0] == x[z]) && (y[0] == y[z])) {
            inGame = false;
        }
    }

    if (y[0] >= C_HEIGHT) {
        y[0] = 0;
    }

    if (y[0] < 0) {
       y[0] = C_HEIGHT;
    }

    if (x[0] >= C_WIDTH) {
      x[0] = 0;
    }

    if (x[0] < 0) {
      x[0] = C_WIDTH;
    }
}

function checkLives() {
	if (lives == 0) {
		inGame = false;
	}
}

function checkScore() {
	if (score == 15) {
		inGame = false;
	}
}

function move() {
    for (var z = dots; z > 0; z--) {
        x[z] = x[z-1];
        y[z] = y[z-1];
    }

    if (leftDirection) {
        x[0] -= DOT_SIZE;
    }

    if (rightDirection) {
        x[0] += DOT_SIZE;
    }

    if (upDirection) {
        y[0] -= DOT_SIZE;
    }

    if (downDirection) {
        y[0] += DOT_SIZE;
    }
}    

function doDrawing() {
    ctx.clearRect(0, 0, C_WIDTH, C_HEIGHT);
	ctx.fillRect(0, 0, C_WIDTH, C_HEIGHT);
	
    if (inGame) {
        ctx.drawImage(apple1, apple1_x, apple1_y);
		ctx.drawImage(apple1, apple2_x, apple2_y);
		ctx.drawImage(apple1, apple3_x, apple3_y);
		ctx.drawImage(apple1, apple4_x, apple4_y);
		ctx.drawImage(apple1, apple5_x, apple5_y);
		ctx.drawImage(apple1, apple6_x, apple6_y);
		ctx.drawImage(apple1, apple7_x, apple7_y);
		ctx.drawImage(apple1, apple8_x, apple8_y);
		ctx.drawImage(apple1, apple9_x, apple9_y);
		ctx.drawImage(apple1, apple10_x, apple10_y);
		ctx.drawImage(apple1, apple11_x, apple11_y);
		ctx.drawImage(apple1, apple12_x, apple12_y);
		ctx.drawImage(apple1, apple13_x, apple13_y);
		ctx.drawImage(apple1, apple14_x, apple14_y);
		ctx.drawImage(apple1, apple15_x, apple15_y);
		ctx.drawImage(block1, block1_x, block1_y);
		ctx.drawImage(block2, block2_x, block2_y);
		ctx.drawImage(block3, block3_x, block3_y);
		ctx.drawImage(block4, block4_x, block4_y);
		ctx.drawImage(block5, block5_x, block5_y);
		ctx.drawImage(block6, block6_x, block6_y);
		ctx.drawImage(block7, block7_x, block7_y);
		ctx.drawImage(block8, block8_x, block8_y);
		ctx.drawImage(block9, block9_x, block9_y);
		ctx.drawImage(block10, block10_x, block10_y);
		
		
        for (var z = 0; z < dots; z++) {
            if (z == 0) {
                ctx.drawImage(head, x[z], y[z]);
            } else {
                ctx.drawImage(ball, x[z], y[z]);
            }
        }    
    } else {
        checkWinCondition();
    }
}

function checkWinCondition() {
	if (score == 15) {
		gameWon();
	} else {
		gameOver();
	}
}

function gameOver() {
    ctx.fillStyle = "black";
    ctx.textBaseline = "middle"; 
    ctx.textAlign = "center"; 
    ctx.font = "normal bold 36px arial";
    ctx.fillText("GAME OVER", C_WIDTH/2, C_HEIGHT/2);
}

function gameWon() {
    ctx.fillStyle = "black";
    ctx.textBaseline = "middle"; 
    ctx.textAlign = "center"; 
    ctx.font = "normal bold 36px arial";
    ctx.fillText("YOU WIN!", C_WIDTH/2, C_HEIGHT/2);
}

onkeydown = function(e) {
    var key = e.keyCode;

    if ((key == LEFT_KEY) && (!rightDirection)) {
        leftDirection = true;
        upDirection = false;
        downDirection = false;
    }

    if ((key == RIGHT_KEY) && (!leftDirection)) {
        rightDirection = true;
        upDirection = false;
        downDirection = false;
    }

    if ((key == UP_KEY) && (!downDirection)) {
        upDirection = true;
        rightDirection = false;
        leftDirection = false;
    }

    if ((key == DOWN_KEY) && (!upDirection)) {
        downDirection = true;
        rightDirection = false;
        leftDirection = false;
    }        
};
</script>
